#! /usr/bin/env sh
#======================================================================
# NAME
#   makeit4 - Build Proxmark3 RDV4 images and binaries
#
# DESCRIPTION
#   This script will build the latest Proxmark3 RDV4
#
# AUTHOR
#   Nov 22, 2019 / Stefan Benediktsson
#
#======================================================================
#--------------------------------------------------
# Initiate variables
#--------------------------------------------------
#------------------------------
# Build vars
#------------------------------

if [ ! -f .config ] ; then
    make menuconfig
fi

eval `cat .config | egrep -v "^#|^$" |  sed 's/CONFIG_//g' | awk '{
    if( index($0,"__") ) {
        gsub("__","=",$0)
        gsub("=y$","",$0)
        print $0
    } else {
        print $0
    }
}'`


#PLATFORM=PM3RDV4
#STANDALONE=HF_YOUNG

#------------------------------
# System vars
#------------------------------
FWDIR="/usr/local/share/proxmark3/firmware"
BOOTROM=bootrom
FULLIMG=fullimage

tBOLD()
{
    echo "\e[41m"
}
tRESET()
{
    echo "\e[0m"
}

#--------------------------------------------------
# Install prereqs
#--------------------------------------------------

if [ "${GETDEPENDENCIES}" = "y" ] ; then
tBOLD
cat <<_EOM_
==================================================
            Installing prerequisits
==================================================
_EOM_
tRESET
(
sudo apt update
sudo apt install git build-essential libreadline5 libreadline-dev gcc-arm-none-eabi libusb-0.1-4 libusb-dev libqt4-dev ncurses-dev perl pkg-config libpcsclite-dev pcscd libsndfile1-dev
)
echo "DONE"

#--------------------------------------------------
# Check that ModemManager is not installed
#--------------------------------------------------
if [ -n "`dpkg -l modemmanager | egrep '^ii'`" ] ; then
    tBOLD
    cat <<_EOM_
==================================================
            Uninstall ModemManager
==================================================
_EOM_
    tRESET
    sudo apt purge modemmanager #>/dev/null 2>&1
fi
fi

#--------------------------------------------------
# Show header
#--------------------------------------------------
tBOLD
cat <<_EOM_
==================================================
               Building Proxmark3
--------------------------------------------------
  Platform  : ${PLATFORM}
  Standalone: ${STANDALONE}
==================================================
_EOM_
tRESET

#--------------------------------------------------
# Check if we have a Proxmark3 repo downloaded
#--------------------------------------------------

if [ ! -d "proxmark3" ] ; then
    if [ "${GITDOWNLOAD}" = "y" ] ; then
        git clone https://github.com/RfidResearchGroup/proxmark3.git proxmark3
    fi
fi

if [ ! -d "proxmark3" ] ; then
    echo "No proxmark3 downloaded... exiting!"
    exit 0
fi

cd proxmark3

#--------------------------------------------------
# Check if remote GIT update available
#--------------------------------------------------
if [ "${GITDOWNLOAD}" = "y" ] ; then
    git fetch -v --dry-run 2>&1 | grep master | grep "up to date" >/dev/null 2>&1
if [ $? -eq 1 ] ; then
    echo -n "Git update available... should I download? [Y|n]: "

    read answer
    case ${answer} in
        n|N)    doupdate="0" ;;
        *)      doupdate="1" ;;
    esac

    if [ "${doupdate}" -eq 1 ] ; then
        git pull
    fi
fi
fi

#======================================================================
if [ "${BUILDCLEAN}" = "y" ] ; then
tBOLD
cat <<_EOM_

==================================================
                 Cleaning up
--------------------------------------------------
_EOM_
tRESET
make clean
fi

#======================================================================
if [ "${BUILD}" = "y" ] ; then
tBOLD
cat <<_EOM_

==================================================
                Building code
--------------------------------------------------
_EOM_
tRESET
make -j${THREADS} all PLATFORM=${PLATFORM} STANDALONE=${STANDALONE} PLATFORM_EXTRAS=${PLATFORM_EXTRAS}
fi

#======================================================================
if [ "${INSTALL}" = "y" ] ; then
tBOLD
cat <<_EOM_

==================================================
               Installing image
--------------------------------------------------
_EOM_
tRESET
sudo make install PLATFORM=${PLATFORM} STANDALONE=${STANDALONE}
sudo cp ${FWDIR}/${BOOTROM}.elf ${FWDIR}/${BOOTROM}_${PLATFORM}_${STANDALONE}.elf
sudo cp ${FWDIR}/${FULLIMG}.elf ${FWDIR}/${FULLIMG}_${PLATFORM}_${STANDALONE}.elf
fi

#======================================================================
if [ "${FLASHBOOT}" = "y" ] ; then
tBOLD
cat <<_EOM_

==================================================
               Flashing boot image
--------------------------------------------------
_EOM_
tRESET
pm3 --flash --unlock-bootloader --image ${FWDIR}/${BOOTROM}.elf
fi

#======================================================================
if [ "${FLASHFULL}" = "y" ] ; then
tBOLD
cat <<_EOM_

==================================================
               Flashing full image
--------------------------------------------------
_EOM_
tRESET
pm3 --flash --unlock-bootloader --image ${FWDIR}/${FULLIMG}.elf
fi
